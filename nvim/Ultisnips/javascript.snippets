snippet asynci "Async IIF"
;(async () => {
	${VISUAL}$0
})()
endsnippet

snippet afunc "Async function"
async function $1($2) {
	$0
}
endsnippet

snippet arr "arrow function" i
($1) => {
	$0
}
endsnippet

snippet arrr "arrow function that returns an object" i
($1) => (
	${VISUAL}$0
)
endsnippet

snippet arro "Arrow function to object" i
($1) => ({
	$0
})
endsnippet

snippet econst "Export const"
export const $1 = $0
endsnippet

snippet comm	"3 Line Comment"
// ------------------------------------
// $0
// ------------------------------------
endsnippet

snippet cerr "Console Error"
console.error($1);
endsnippet

snippet "in(line)?" "Inline Comment" ir
/* ${VISUAL}$1 */
endsnippet

snippet "ecl(og)?" "Console Log" r
// eslint-disable-next-line no-console
console.log(${VISUAL}$0)
endsnippet

snippet "cl(og)?" "console log" ir
console.log(${VISUAL}$0);
endsnippet

snippet "rl(og)?" "react console log" ir
{console.log(${VISUAL}$0)}
endsnippet

snippet deb "Debug Statement"
debug($0);
endsnippet

snippet desc "A Jest/Mocha describe function"
describe('$1', () => {
	${VISUAL}$0
});
endsnippet

snippet des "Destructure"
const { $1 } = $0;
endsnippet

snippet dis "dispatch"
dispatch({ type: ActionTypes.$1, payload: $0 });
endsnippet

snippet edisf "Eslint disable file"
/* eslint-disable */
endsnippet

snippet edis "Eslint disable next line"
// eslint-disable${0:-next}-line $1
endsnippet

snippet for "For loop"
for (let $1 = 0; $1 < $2.length; $1++) {
	$0
}
endsnippet

snippet jdeb "JSON debug"
debug('$1', JSON.stringify(${VISUAL}$0, null, 2));
endsnippet

snippet "jl(og)?" "JSON log" r
console.log($2JSON.stringify(${VISUAL}$1, null, 2));
endsnippet

snippet jstr "JSON Stringify"
JSON.stringify(${VISUAL}$0, null, 2);
endsnippet

snippet imp "Import"
import $1 from '$1';
endsnippet

snippet mex "Module Exports"
module.exports = $0;
endsnippet

snippet "re(quire)?" "Require" i
const $1 = require('$1');
endsnippet

snippet prom "Promise"
new Promise((resolve, reject) => {
	$0
});
endsnippet

snippet props "Props destructure"
const { $1 } = this.props$0;
endsnippet

snippet rcont "Redux Connected Component"
import React from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import { actions } from '../../modules/actions';

class $1 extends React.Component {
	static propTypes = {

	}

	static defaultProps = {

	}

	constructor() {
		super();
	}

	render() {
	return (
		<div>$0</div>
	);
	}

}

const mapStateToProps = state => ({ $2 });
export default connect(mapStateToProps, { ...actions })($1);
endsnippet

snippet rclass "React class"
import React from 'react';
import PropTypes from 'prop-types';

export default class $1 extends React.Component {
	static propTypes = {

	}

	static defaultProps = {

	}

	constructor() {
		super();
	}

	render() {
		return (
			<div>$2</div>
		);
	}
}
endsnippet

snippet rfunc "React dumb component"
import React from 'react';
import PropTypes from 'prop-types';

import './styles.scss';

const $1 = ({$2}) => {
	return (
	$0
	);
}

$1.propTypes = {
	$3
};

export default $1;
endsnippet

snippet rconst "Action Constant"
export const $1 = "$1";
endsnippet

snippet red "Reducer Boilerplate"
[$1]: (state, action) => {
	$0
}
endsnippet

snippet redo "Reducer Boilerplate Return Object"
[$1]: (state, action) => ({
	...state,
	$0
})
endsnippet

snippet req "Express arrow"
(req, res) => {
	$0
}
endsnippet

snippet ereq "Express arrow and export (controller)"
export const $1 = (req, res) => {
	$0
};
endsnippet

snippet route "Express Route"
router.$1("/$2", (req, res) => {
	$0
});
endsnippet

snippet strict "Use Strict"
"use strict";
endsnippet

snippet sty "Styled Component"
const $1 = styled.$2\`
	$0
\`
endsnippet

snippet test "A jest test case"
test('$1', (${2:done}) => {
	$0
});
endsnippet

snippet it "A Mocha test case"
it("$1",  ${2:done} => {
	$0
});
endsnippet

snippet "(\.|)then" "Promise Then" r
.then(${1:($2)} => ${3:{${4}}})
${5:.catch((${6:err}) => {$7})}
endsnippet

snippet \$ "Template placeholder" i
${$0}
endsnippet

# Async
snippet "water(|fall)" "Async Waterfall" r
async.waterfall([
	$1
], ${0:done});
endsnippet

# REACT TAGS
snippet div "Div"
<div${1: className='${2}'}>
	$0
</div>
endsnippet

snippet span "span tag"
<span $0/>
endsnippet

snippet img "img tag"
<img src={$1} ${2:alt='${3}' }/>
endsnippet

snippet input "input tag"
<input type="$1" $0 />
endsnippet

snippet sm "Pure CSS sm"
// pure-sm
@media screen and (min-width: 35.5em) {
	${VISUAL}$0
}
endsnippet

snippet md "Pure CSS md"
// pure-md
@media screen and (min-width: 48em) {
	${VISUAL}$0
}
endsnippet

snippet lg "Pure CSS lg"
//pure-lg
@media screen and (min-width: 64em) {
	${VISUAL}$0
}
endsnippet

snippet xl "Pure CSS xl"
// pure-xl
@media screen and (min-width: 80em) {
	${VISUAL}$0
}
endsnippet

snippet pure "Pure CSS"
// pure-sm
@media screen and (min-width: 35.5em) {
	$1
}

// pure-md
@media screen and (min-width: 48em) {
	$2
}

//pure-lg
@media screen and (min-width: 64em) {
	$3
}
// pure-xl
@media screen and (min-width: 80em) {
	$0
}
endsnippet

snippet ibm "IBM License"
/** *****************************************************************************
 * Licensed Materials - Property of IBM
 * (c) Copyright IBM Corporation 2018. All Rights Reserved.
 *
 * Note to U.S. Government Users Restricted Rights:
 * Use, duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 ****************************************************************************** */
endsnippet
